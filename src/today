#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: today [OPTIONS] CONDITION [CONDITION …]

positional arguments:
  CONDITION        please see epilog

optional arguments:
  -h, --help       show this help message and exit
  -V, --version    show version information and exit
  -c, --copyright  show copying policy and exit
or:
  -u, -z, --utc    use UTC rather than local time
  -q, --quiet      don't say a thing unless it's an error
  -v, --verbose    show result

This program tests if a set of conditions is true for today,
and exits accordingly.

Conditions include:
  · weekday
  · occurance of weekday

E.g.:
  · today is monday
  · today is the last tuesday
  · today is a wednesday or a thursday
  · today is a friday, a saturday, or a sunday.
  · today is the second or the fourth thursday

Weekdays can be abbreviated to their first three letters:
Mon, Tue, Wed, Thu, Fri, Sat, Sun.

Ordinals can be abbreviated to 1st, 2nd, 3rd, 4th, or 5th,
or even just 1, 2, 3, 4, or 5.
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os
import pathlib
import argparse
import datetime
import string

from pprint import pprint

if sys.version_info < (3, 4):
    print('Python 3.4+ required.', file=sys.stderr)
    sys.exit(1)

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'today'
__revision__ = '3'
__version__ = '2019.5.2-{rev}'.format(rev=__revision__)
__copyright__ = """\
today {ver}
Copyright © 2010−19 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(ver=__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
EPILOG = """
This program tests if a set of conditions is true for today,
and exits accordingly.

Conditions include:
  · weekday
  · occurance of weekday

E.g.:
  · today is monday
  · today is the last tuesday
  · today is a wednesday or a thursday
  · today is a friday, a saturday, or a sunday.
  · today is the second or the fourth thursday

Weekdays can be abbreviated to their first three letters:
Mon, Tue, Wed, Thu, Fri, Sat, Sun.

Ordinals can be abbreviated to 1st, 2nd, 3rd, 4th, or 5th,
or even just 1, 2, 3, 4, or 5.
"""

(STDIN, STDOUT, STDERR) = (sys.stdin, sys.stdout, sys.stderr)

SENTINEL = '\0'

WEEKDAYS = (
    SENTINEL,  # This index in 1-based
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday'
)


def keyword(word):
    """Make a case-insensitive abbreviation of WORD"""
    return word[:3].casefold()


DOW_LIST = [keyword(_dow) for _dow in WEEKDAYS]
DOW_BITS = {_val: 1 << _key for (_key, _val) in enumerate(DOW_LIST)}
DOW_SET = set(DOW_LIST)
DOW_SET.discard(SENTINEL)

ORDINALS = (
    SENTINEL,  # This index is 1-based
    'first',
    'second',
    'third',
    'fourth',
    'fifth',
    'last'
)
ORDS = (
    SENTINEL,  # This index in 1-based
    '1st',
    '2nd',
    '3rd',
    '4th',
    '5th'
)
ORD_DICT = {
    keyword(_val): _key for (_key, _val) in enumerate(ORDINALS)
}
SUGAR = {
    keyword(_val): _key for (_key, _val) in enumerate(ORDS)
}
ORD_DICT.update(SUGAR)
SUGAR = {
    keyword(_val): _key for (_key, _val) in enumerate('\012345')
}
ORD_DICT.update(SUGAR)
ORD_SET = set(ORD_DICT.keys())
ORD_SET.discard(SENTINEL)

WEEKS = (
    (0, 0),  # This index is 1-based
    (1, 7), (8, 14), (15, 21), (22, 28), (29, 31)
)

IGNORE = {keyword(w) for w in 'a|is|number|occurrence|of|or|the'.split('|')}


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint(head if data is None else {head: data}, stream=STDERR)


def die(error=None):
    """Exit gracefully"""
    debug('exit', error)

    if error:
        print(error, file=STDERR)

    sys.exit(1 if error else 0)


def week_index(year, month, day):
    """Is this the third Tuesday?"""
    leap = int(year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))
    mdays = (
        0,  # This index is 1-based
        31, 28+leap, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    )
    end = mdays[month]
    start = end - 7

    if start < day <= end:
        return 6

    index = 1

    for (start, end) in WEEKS[1:]:
        if start <= day <= end:
            return index
        index += 1

    return -1


def ordinal(week):
    """1st, 2nd, 3rd, 4th or 5th"""
    if week < 1 or week > 6:
        die('internal error: week == {}'.format(week))
    return ORDINALS[week]


def explain(now, windex=None, verbose=False, return_code=1):
    """Print a human explanation of why we failed"""
    if not verbose:
        sys.exit(return_code)

    data = {
        'month': '{:%B}'.format(now),
        'dow': WEEKDAYS[now.isoweekday()],
    }

    if windex is None:
        template = 'Today is {dow}'
    else:
        data['week'] = ordinal(windex)
        template = 'Today is the {week} {dow} of {month}'

    print(template.format(**data))
    sys.exit(return_code)


def today(exprs, utc=False, verbose=False):
    """See if today is matched by EXPR"""
    now = datetime.datetime.utcnow() if utc else datetime.datetime.now()
    (year, _, dow) = now.isocalendar()
    (year, month, day) = now.timetuple()[:3]

    dow_bits = 0
    dow_set = set()
    weeks = set()
    windex = None

    for word in exprs:
        abbr = keyword(word)
        if abbr in IGNORE:
            continue
        if abbr in DOW_SET:
            dow_bits |= DOW_BITS[abbr]
            dow_set.add(DOW_LIST.index(abbr))
        elif abbr in ORD_SET:
            weeks.add(ORD_DICT[abbr])
        else:
            die('unrecognized expression: {}'.format(word))

    if dow_bits:
        if not dow_bits & (1 << dow):
            explain(now, windex, verbose, return_code=1)

    if weeks:
        windex = week_index(year, month, day)
        if windex not in weeks:
            explain(now, windex, verbose, return_code=1)

    explain(now, windex, verbose, return_code=0)


def main(progname=__whoami__):
    """Main entry point"""

    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=EPILOG
    )
    # Generic arguments
    parser.add_argument('-V', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    # Specific arguments
    parser.add_argument('-u', '-z', '--utc', action='store_true',
                        help='use UTC rather than local time')
    # Mutually exclusive arguments
    pgroup = parser.add_mutually_exclusive_group()
    pgroup.add_argument('-q', '--quiet', action='store_true', default=True,
                        help="don't say a thing unless it's an error")
    pgroup.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='show result')
    # The rest
    parser.add_argument('CONDITION', nargs='+', help='please see epilog')

    args = parser.parse_args()
    debug('args', args)

    today(
        [cond.strip(string.punctuation) for cond in args.CONDITION],
        args.utc,
        args.verbose or not args.quiet
    )
    return 0


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
